# production-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: production-web-app
  labels:
    app: production-web
    environment: production
    version: "2.0"
  annotations:
    deployment.kubernetes.io/revision: "1"
    description: "Production web application with full configuration"
spec:
  # Scaling configuration
  replicas: 5
  
  # Deployment strategy configuration
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1        # Max pods that can be unavailable during update
      maxSurge: 2              # Max additional pods during update
  
  # How long to wait for rollout to progress
  progressDeadlineSeconds: 600
  
  # Number of old ReplicaSets to retain for rollback
  revisionHistoryLimit: 10
  
  # Selector for managed pods
  selector:
    matchLabels:
      app: production-web
      tier: frontend
  
  template:
    metadata:
      labels:
        app: production-web
        tier: frontend
        version: "2.0"
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
    spec:
      
      # Service account (for RBAC)
      serviceAccountName: web-app-sa
      
      # Container specification
      containers:
      - name: web-application
        image: nginx:1.21-alpine
        imagePullPolicy: IfNotPresent
        
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        
        # Environment variables
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "info"
        - name: PORT
          value: "8080"
        - name: METRICS_PORT
          value: "9090"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        
        # Resource management
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "512Mi"
            cpu: "500m"
            ephemeral-storage: "2Gi"
        
        # Health checks
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        # Startup probe for slow-starting containers
        startupProbe:
          httpGet:
            path: /health/startup
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
        
        # Volume mounts
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: cache-volume
          mountPath: /var/cache/nginx
        - name: run-volume
          mountPath: /var/run
        - name: config-volume
          mountPath: /etc/nginx/conf.d
          readOnly: true
        
        # Lifecycle hooks
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - sleep 15
      
      # Init containers for setup tasks
      initContainers:
      - name: setup-config
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          echo "Initializing application configuration..."
          echo "server {
              listen 8080;
              location / {
                  root /usr/share/nginx/html;
                  index index.html;
              }
              location /health/ready {
                  access_log off;
                  return 200 \"healthy\n\";
                  add_header Content-Type text/plain;
              }
              location /health/live {
                  access_log off;
                  return 200 \"alive\n\";
                  add_header Content-Type text/plain;
              }
              location /health/startup {
                  access_log off;
                  return 200 \"started\n\";
                  add_header Content-Type text/plain;
              }
          }" > /config/default.conf
          echo "Configuration setup complete"
        volumeMounts:
        - name: config-volume
          mountPath: /config
        resources:
          requests:
            memory: "32Mi"
            cpu: "25m"
          limits:
            memory: "64Mi"
            cpu: "50m"
      
      # Volumes
      volumes:
      - name: tmp-volume
        emptyDir:
          sizeLimit: "100Mi"
      - name: cache-volume
        emptyDir:
          sizeLimit: "200Mi"
      - name: run-volume
        emptyDir:
          medium: "Memory"
          sizeLimit: "50Mi"
      - name: config-volume
        emptyDir:
          sizeLimit: "10Mi"
      
      # Pod scheduling preferences
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values: ["production-web"]
              topologyKey: kubernetes.io/hostname
      
      # Tolerations for node taints
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      
      # Termination grace period
      terminationGracePeriodSeconds: 30
      
      # DNS configuration
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "2"
        - name: edns0